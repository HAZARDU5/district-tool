{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","district-tool/tests/app.lint-test.js","district-tool/tests/helpers/destroy-app.js","district-tool/tests/helpers/module-for-acceptance.js","district-tool/tests/helpers/resolver.js","district-tool/tests/helpers/start-app.js","district-tool/tests/integration/components/transformer-grid-test.js","district-tool/tests/integration/helpers/even-test.js","district-tool/tests/test-helper.js","district-tool/tests/tests.lint-test.js","district-tool/tests/unit/routes/editor-test.js","district-tool/tests/unit/routes/index-test.js","district-tool/tests/unit/routes/preview-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('district-tool/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/aframe/land-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/aframe/land-component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/aframe/raw/block-cursor.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/aframe/raw/block-cursor.js should pass ESLint\\n\\n10:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/aframe/raw/colorize.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/aframe/raw/colorize.js should pass ESLint\\n\\n15:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/aframe/raw/environment-ground-texture.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/aframe/raw/environment-ground-texture.js should pass ESLint\\n\\n23:42 - \\'THREE\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/aframe/raw/fillable.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/aframe/raw/fillable.js should pass ESLint\\n\\n1:8 - \\'AFRAME\\' is defined but never used. (no-unused-vars)\\n64:17 - Unexpected console statement. (no-console)\\n70:21 - Unexpected console statement. (no-console)\\n83:21 - Unexpected console statement. (no-console)\\n85:21 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/aframe/raw/intersection-spawn.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/aframe/raw/intersection-spawn.js should pass ESLint\\n\\n85:21 - Unexpected console statement. (no-console)\\n87:21 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/aframe/raw/lod-level.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/aframe/raw/lod-level.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/aframe/raw/lod.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/aframe/raw/lod.js should pass ESLint\\n\\n1:8 - \\'AFRAME\\' is defined but never used. (no-unused-vars)\\n5:36 - \\'THREE\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('components/aframe/raw/scene.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/aframe/raw/scene.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/aframe/raw/snap.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/aframe/raw/snap.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/aframe/raw/spawn-in-circle.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/aframe/raw/spawn-in-circle.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/transformer-grid.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/transformer-grid.js should pass ESLint\\n\\n1:8 - \\'Ember\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('helpers/even.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/even.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/editor.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/editor.js should pass ESLint\\n\\n172:13 - Unexpected console statement. (no-console)\\n176:13 - Unexpected console statement. (no-console)\\n180:13 - Unexpected console statement. (no-console)\\n184:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/preview.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/preview.js should pass ESLint\\n\\n');\n  });\n});","define('district-tool/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('district-tool/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'district-tool/tests/helpers/start-app', 'district-tool/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('district-tool/tests/helpers/resolver', ['exports', 'district-tool/resolver', 'district-tool/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('district-tool/tests/helpers/start-app', ['exports', 'district-tool/app', 'district-tool/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('district-tool/tests/integration/components/transformer-grid-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('transformer-grid', 'Integration | Component | transformer grid', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"rbuOMsPE\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"transformer-grid\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"aFZKTAah\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"transformer-grid\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('district-tool/tests/integration/helpers/even-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('even', 'helper:even', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"0QUOq+Ko\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"even\\\",[[19,0,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('district-tool/tests/test-helper', ['district-tool/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('district-tool/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/transformer-grid-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/transformer-grid-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/even-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/even-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/editor-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/editor-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/preview-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/preview-test.js should pass ESLint\\n\\n');\n  });\n});","define('district-tool/tests/unit/routes/editor-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:editor', 'Unit | Route | editor', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('district-tool/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('district-tool/tests/unit/routes/preview-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:preview', 'Unit | Route | preview', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","require('district-tool/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingslGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}